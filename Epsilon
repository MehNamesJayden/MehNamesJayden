local Player = game.Players.LocalPlayer
local Character = Player.Character
local Statuses = workspace.AliveData[Player.Name].Status

if _G.Connections then
    local GUI = game.CoreGui:FindFirstChild("ScreenGui")
    if GUI then
        print("Found")
        if GUI:FindFirstChild("main") then
            GUI:Destroy()
        end
    end
    
    for index, Connection in pairs(_G.Connections) do
        Connection:Disconnect()
        _G.Connections[index] = nil;
    end
end

local AutoCharge = false

local ActionCheck = function()
    if AutoCharge then
        local Artifact = Player.Data:FindFirstChild("Artifact");
        if Artifact then
            if Artifact.Value == "UnwaveringResolve" then
                return false;
            end
        end
        
        if Character.Humanoid.Health <= 0 or Character.Humanoid.WalkSpeed >= Character.Stats.WalkSpeed.Value + 10 then
            return true;
        end
    	
    	if Statuses:FindFirstChild("Knocked") or Statuses:FindFirstChild("Climbing") or Statuses:FindFirstChild("Blocking") or Statuses:FindFirstChild("Stun") or Statuses:FindFirstChild("ReturnStun") or Statuses:FindFirstChild("ActiveCast") then
    		return true;
    	end
    else
        return true;
    end
end;

local library = loadstring(game:HttpGet("https://pastebin.com/raw/npYdYVkB"))();
local Combat = library:CreateSection("Combat");

Combat:Toggle("AutoCharge",function(bool)
    AutoCharge = bool;
    
    local canActivate = not ActionCheck();
    if lastActive ~= canActivate then
        Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
    end
end)

local lastActive = false;
_G.Connections = {
    _characterAdded = Player.CharacterAdded:Connect(function(newCharacter)
        if _G.Connections._WalkSpeedUpdate then
            _G.Connections._WalkSpeedUpdate:Disconnect()
            _G.Connections._WalkSpeedUpdate = nil;
        end;
        
        Character = newCharacter;
        _G.Connections._WalkSpeedUpdate = Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
            local canActivate = not ActionCheck();
            
            if lastActive ~= canActivate then
                Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
            end
        end)
    end);
    
    _StatusAdded = Statuses.ChildAdded:Connect(function(Status)
        local canActivate = not ActionCheck();
        
        if lastActive ~= canActivate then
            Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
        end
    end);
    
    _StatusRemoved = Statuses.ChildRemoved:Connect(function(Status)
        local canActivate = not ActionCheck();
        
        if lastActive ~= canActivate then
            Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
        end
    end);
    
};

if Character then
    _G.Connections._WalkSpeedUpdate = Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
        local canActivate = not ActionCheck();
        
        if lastActive ~= canActivate then
            Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
        end
    end)
end

library:Ready()
