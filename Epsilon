local Player = game.Players.LocalPlayer;
local Character = Player.Character;
local Statuses = workspace.AliveData[Player.Name].Status;

local lastActive = false;
local AutoCharge = false;
local AutoFarmActive = false;
local AutoFarmTo = "";

if _G.Connections then
    local GUI = game.CoreGui:FindFirstChild("ScreenGui")
    if GUI then
        if GUI:FindFirstChild("main") then
            GUI:Destroy()
        end
    end
    
    if _G.Connections._script then
        _G.Connections._script:Destroy();
        _G.Connections._script = nil;
    end
    
    if _G.drawings then
        for _, txt in pairs(_G.drawings) do
            local success, response = pcall(function()
                txt:Remove()
                _G.drawings[_] = nil;
            end)

            if not success then
                warn("Error produced while clearing drawings: "..response)
            end
        end

        _G.drawings = nil;
    end
    
    if _G.Coroutines then
        for _, cor in pairs(_G.Coroutines) do
            coroutine.close(cor)
        end
    end
    
    for index, Connection in pairs(_G.Connections) do
        Connection:Disconnect()
        _G.Connections[index] = nil;
    end
end

local ActionCheck = function()
    if AutoCharge then
        local Artifact = Player.Data:FindFirstChild("Artifact");
        if Artifact then
            if Artifact.Value == "UnwaveringResolve" then
                return false;
            end
        end
        
        if Character.Humanoid.Health <= 0 or Character.Humanoid.WalkSpeed >= Character.Stats.WalkSpeed.Value + 10 then
            return true;
        end
    	
    	if Character.Stats.Climbing.Value or Statuses:FindFirstChild("Knocked") --[[or Statuses:FindFirstChild("Climbing")]] or Statuses:FindFirstChild("Blocking") or Statuses:FindFirstChild("Stun") or Statuses:FindFirstChild("ReturnStun") or Statuses:FindFirstChild("ActiveCast") then
    		return true;
    	end
    else
        return true;
    end
end;

_G.Coroutines = {};
_G.drawings = {};
_G.Connections = {
    _script = script;
    
    _characterAdded = Player.CharacterAdded:Connect(function(newCharacter)
        if _G.Connections._walkSpeedUpdate then
            _G.Connections._walkSpeedUpdate:Disconnect()
            _G.Connections._walkSpeedUpdate = nil;
        end;
        
        if _G.Connections._climbing then
            _G.Connections._climbing:Disconnect()
            _G.Connections._climbing = nil;
        end;
        
        if _G.Connections._statusAdded then
            _G.Connections._statusAdded:Disconnect()
            _G.Connections._statusAdded = nil;
        end;
        
        if _G.Connections._statusRemoved then
            _G.Connections._statusRemoved:Disconnect()
            _G.Connections._statusRemoved = nil;
        end;
        
        Character = newCharacter;
        _G.Connections._walkSpeedUpdate = Character:WaitForChild("Humanoid"):GetPropertyChangedSignal("WalkSpeed"):Connect(function()
            local canActivate = not ActionCheck();
            
            if lastActive ~= canActivate then
                Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
            end
        end);
        
        _G.Connections._climbing = Character.Stats.Climbing.Changed:Connect(function()
            local canActivate = not ActionCheck();
            if lastActive ~= canActivate then
                Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
            end
        end);
        
        _G.Connections._statusAdded = Statuses.ChildAdded:Connect(function(Status)
            local canActivate = not ActionCheck();
            
            if lastActive ~= canActivate then
                Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
            end
        end);
        
        _G.Connections._statusRemoved = Statuses.ChildRemoved:Connect(function(Status)
            local canActivate = not ActionCheck();
            
            if lastActive ~= canActivate then
                Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
            end
        end);
    end);
};

if Character then
    _G.Connections._walkSpeedUpdate = Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
        local canActivate = not ActionCheck();
        
        if lastActive ~= canActivate then
            Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
        end
    end);
    
    _G.Connections._climbing = Character.Stats.Climbing.Changed:Connect(function()
        local canActivate = not ActionCheck();
        if lastActive ~= canActivate then
            Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
        end
    end);
    
    _G.Connections._statusAdded = Statuses.ChildAdded:Connect(function(Status)
        local canActivate = not ActionCheck();
        
        if lastActive ~= canActivate then
            Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
        end
    end);
    
    _G.Connections._statusRemoved = Statuses.ChildRemoved:Connect(function(Status)
        local canActivate = not ActionCheck();
        
        if lastActive ~= canActivate then
            Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
        end
    end);
end

local library = loadstring(game:HttpGet("https://pastebin.com/raw/npYdYVkB"))();
local General = library:CreateSection("Combat");
local AutoFarm = library:CreateSection("AutoFarm");
local Trinkets = library:CreateSection("Trinkets");

-- General
General:Toggle("AutoCharge", function(bool)
    AutoCharge = bool;
    
    local canActivate = not ActionCheck();
    if lastActive ~= canActivate then
        Character.CharacterHandler.Remotes.KeyInput:FireServer(Enum.KeyCode.G, canActivate)
    end
end);

General:Toggle("DisableFallDamage", function(bool)
    Character.FallDamage.Disabled = bool;
end);

-- AutoFarm
AutoFarm:Toggle("Active", function(bool)
    AutoFarmActive = bool;
end);

AutoFarm:Dropdown("OrdenLane", {"Ankh", "Mysterious", "Ceeris"}, function(value)
    AutoFarmTo = value;
end);

-- ESP Setup

local ESP_Settings = {
    Enabled = false;
    Target = "None";
    TargetGroup = "None";
    --RenderDistance = 40;
}

local trinketFolder = workspace.MouseIgnore;
local spawnedTrinkets = {};
local TrinketsInGroup = {};

local Trinkets = {
    "Opal", "Accursed", "Star Fragment", "Ruby", "Emerald", "Diamond", "Night Stone";
    "Scroll", "Ice Essence", "Rift Gem";
    "Ancient Plating", "Phoenix Feather", "Phoenix Down", "Spider Cloak";
    
}
local TrinketTypes = {
    ["Enchants"] = {"Opal", "Accursed", "Star Fragment", "Ruby", "Emerald", "Diamond"};
    ["Spells"] = {"Scroll"};
    ["Artifacts"] = {"Ancient Plating", "Phoenix Feather"};
}

local updateDrawing = function(Trinket)
    local Text = _G.drawings[Trinket];
    local Camera = workspace.CurrentCamera;
    local vector, onScreen = Camera:WorldToScreenPoint(Trinket.Position);
    
    if onScreen then
        local Distance = (Camera.CFrame.Position - Trinket.Position).Magnitude;
        Text.Visible = true;
        Text.Size = math.clamp(Distance/.5, 10, 20);
        Text.Position = Vector2.new(vector.X, vector.Y);
        Text.Text = Trinket.Name.." ("..math.ceil(Distance)..")"
    else
        Text.Visible = false
    end
end

_G.Connections._trinketSpawned = trinketFolder.ChildAdded:Connect(function(Child)
    local Trinket = Child:FindFirstChildOfClass("MeshPart") or Child:FindFirstChildOfClass("BasePart")
            
    if Trinket then
        table.insert(spawnedTrinkets, Trinket)
        
        local newDrawing = Drawing.new("Text")
        _G.drawings[Trinket] = newDrawing;
        newDrawing.Text = Trinket.Name;
        newDrawing.Color = Color3.new(1,1,1);
        newDrawing.Outline = true;
        newDrawing.OutlineColor = Color3.new(0,0,0);

        if TrinketTypes[ESP_Settings.TargetGroup] then
            if TrinketTypes[ESP_Settings.TargetGroup][Trinket.Name] then
                table.insert(TrinketsInGroup, Trinket)

                if ESP_Settings.Enabled then
                    updateDrawing(Trinket)
                end
            end
        elseif Trinket.Name == Target then
            table.insert(TrinketsInGroup, Trinket)

            if ESP_Settings.Enabled then
                updateDrawing(Trinket)
            end
        else
            newDrawing.Visible = false;
        end
    end
end);

_G.Connections._trinketDespawned = trinketFolder.ChildRemoved:Connect(function(Child)
    local Trinket = Child:FindFirstChildOfClass("MeshPart") or Child:FindFirstChildOfClass("BasePart")
            
    if Trinket then
        table.remove(spawnedTrinkets, table.find(spawnedTrinkets, Trinket))
        local draw = _G.drawings[Trinket]

        if draw then
            draw:Remove()
            _G.drawings[table.find(_G.drawings, draw)] = nil;
        end
    end
end);

for iteration, Model in pairs(trinketFolder:GetChildren()) do
    local Trinket = Model:FindFirstChildOfClass("MeshPart") or Model:FindFirstChildOfClass("BasePart")
    if Trinket then
        table.insert(spawnedTrinkets, Trinket)
        
        local newDrawing = Drawing.new("Text")
        _G.drawings[Trinket] = newDrawing;
        newDrawing.Text = Trinket.Name;
        newDrawing.Color = Color3.new(1,1,1)
        newDrawing.Outline = true;
        newDrawing.OutlineColor = Color3.new(0,0,0)

        if TrinketTypes[ESP_Settings.TargetGroup] then
            if TrinketTypes[ESP_Settings.TargetGroup][Trinket.Name] then
                table.insert(TrinketsInGroup, Trinket)
            end
        elseif Trinket.Name == Target then
            table.insert(TrinketsInGroup, Trinket)
        else
            newDrawing.Visible = false;
        end
    end
end

_G.Connections.TrinketESP = game:GetService("RunService").RenderStepped:Connect(function()
    if ESP_Settings.Enabled == false then
        return
    else
        for _, Trinket in pairs(TrinketsInGroup) do
            updateDrawing(Trinket)
        end
    end
end);

Trinkets:Toggle("Enabled", function(bool)
    ESP_Settings.Enabled = bool;

    if not bool then
        for _, Text in pairs(_G.drawings) do
            Text.Visible = false;
        end
    else
        for _, Trinket in pairs(TrinketsInGroup) do
            if TrinketTypes[ESP_Settings.TargetGroup] then
                if TrinketTypes[ESP_Settings.TargetGroup][Trinket.Name] then
                    updateDrawing(Trinket)
                end
            elseif Trinket.Name == Target then
                updateDrawing(Trinket)
            else
                newDrawing.Visible = false;
            end
        end
    end
end);

Trinkets:Box("Trinket", function(Target)
    ESP_Settings.Target = Target;

    TrinketsInGroup = {}
    for index, Trinket in pairs(spawnedTrinkets) do
        local Success, Response = pcall(function()
            if Trinket.Name == Target then
                table.insert(TrinketsInGroup, Trinket)
                _G.drawings[Trinket].Visible = true;
            else
                _G.drawings[Trinket].Visible = false;
            end
        end)

        if not Success then
            warn("Error produced while adding "..Trinket.Name..": "..Response)
        end
    end
end);

Trinkets:Dropdown("Trinket Group", {"None", "Enchants", "Artifacts", "Sellables"}, function(group)
    ESP_Settings.TargetGroup = group;

    TrinketsInGroup = {}
    for index, Trinket in pairs(spawnedTrinkets) do
        local Success, Response = pcall(function()
            if TrinketTypes[group] then
                if TrinketTypes[group][Trinket.Name] then
                    table.insert(TrinketsInGroup, Trinket)
                    _G.drawings[Trinket].Visible = true;
                end
            else
                _G.drawings[Trinket].Visible = false;
            end
        end)

        if not Success then
            warn("Error produced while adding "..Trinket.Name..": "..Response)
        end
    end
end);
library:Ready();



_G.Coroutines.AutoFarm = coroutine.create(function()
    local Rope = workspace.Map.Rope
    
    while task.wait(1) do
        if AutoFarmActive then
            Character:SetPrimaryPartCFrame(CFrame.new(2763.840087890625, 461.7503967285156, -71.43907928466797))
            task.wait(.5)
            
            Character:SetPrimaryPartCFrame(Rope.Part.CFrame)
            task.wait(2+math.random(0,3))
            
            fireclickdetector(Rope.ClickDetector)
            task.wait(20+math.random(0,10))
            
            Character:SetPrimaryPartCFrame(CFrame.new(4643.4482421875, -1367.0096435546875, 1269.9083251953125))
            task.wait(.5)
            
            if AutoFarmTo == "Ankh" then
                Character:SetPrimaryPartCFrame(workspace.Map.Orden.eyebeam2.CFrame)
            elseif AutoFarmTo == "Mysterious" then
                Character:SetPrimaryPartCFrame(workspace.Map.Orden.eyebeam3.CFrame)
            elseif AutoFarmTo == "Ceeris" then
                Character:SetPrimaryPartCFrame(workspace.Map.Orden.eyebeam4.CFrame)
            end
        end
    end
end);

coroutine.resume(_G.Coroutines.AutoFarm);
